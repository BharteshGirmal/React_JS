// React Course Notes (22/07/2024)

// React is a popular JavaScript library used for building user interfaces by creating reusable components.
// It allows you to create dynamic and interactive web applications with a focus on efficient rendering.

// React Components: React components are the building blocks of a React application. You can create components using either class-based or function-based syntax.

// Class Component Example:
// Class components are more traditional and involve more boilerplate code. They are useful when you need to use state and lifecycle methods.

import React, { Component } from 'react';

export default class App extends Component {
  render() {
    return (
      <div>
        {/* This is where you put the component's content */}
      </div>
    );
  }
}

// Function Component Example:
// Function components are simpler and easier to write. They are often used for presentational components that do not manage their own state.

import React from 'react';

export default function App() {
  return (
    <div>App</div>
  );
}

// State Management in Class Components:
// State is used to manage data that can change over time. In class components, state is defined in the constructor and updated using the setState method.

export default class App extends Component {
  constructor() {
    super();
    // Initialize state
    this.state = {
      Name: "Bhartesh",
    };
  }

  render() {
    return (
      <div>
        <span>{this.state.Name}</span>
        <button onClick={() => {
          // Update state when button is clicked
          this.setState({
            Name: "Girmal"
          });
        }}>Click here</button>
      </div>
    );
  }
}

// Shallow Merge Example:
// Shallow merge is used when updating part of the state. It ensures that the existing state is preserved except for the changes you specify.

this.setState((state, props) => {
  return {
    Name: { firstName: "Bhartesh", lastName: "Girmal" }
  };
}, () => {
  console.log(this.state);
});

// Mapping Arrays to Elements:
// You can map an array of data to JSX elements. Each element in the array needs a unique key to help React identify which items have changed.

this.state = {
  monsters: [
    { Name: "Monster1" },
    { Name: "Monster2" },
    { Name: "Monster3" },
    { Name: "Monster4" },
    { Name: "Monster5" },
  ]
};

{this.state.monsters.map((monster) =>
  {
    return <h1 key={monster.Name}>{monster.Name}</h1>;
  })
}

// React Lifecycle Methods:
// Lifecycle methods are hooks that allow you to run code at specific points in a component's life cycle (mounting, updating, unmounting).

// Common Lifecycle Methods:
// 1. componentDidMount() - Runs after the component is first rendered.
// 2. componentDidUpdate() - Runs after the component is updated.
// 3. componentWillUnmount() - Runs before the component is removed from the DOM.

componentDidMount() {
  // Fetching data when the component mounts
  fetch('https://jsonplaceholder.typicode.com/users')
    .then((response) => response.json())
    .then((data) => console.log(data))
    .catch((err) => console.log(err.message));

  // Using async/await to fetch data
  const fetchData = async () => {
    try {
      const response = await fetch('https://jsonplaceholder.typicode.com/users');
      const data = await response.json();
      console.log(data);
    } catch (err) {
      console.log(err.message);
    }
  };
}

// Props:
// Props (short for properties) are used to pass data from a parent component to a child component. They are read-only and cannot be modified by the child component.

// Example of Passing Props:

<SearchBox className='search-box' placeholder='search monsters' handleSearchChange={this.handleOnChange}/>
<CardList monsterarray={filteredMonsters} />

// Search Component Example:

// Props are accessed in functional components via this.props or directly as arguments.

<div className='container'>
  <input
    className={this.props.className}
    type='search'
    placeholder={this.props.placeholder}
    onChange={this.props.handleSearchChange}
  />
</div>

// CSS in React:
// React allows you to style components using various methods, including SASS and CSS-in-JS.

// Install SASS: npm add sass

// Example SASS Styling:

.category-container {
  min-width: 30%;
  height: 240px;
  flex: 1 1 auto;
  display: flex;
  align-items: center;
  justify-content: center;
  border: 1px solid black;
  margin: 0 7.5px 15px;
  overflow: hidden;

  &:hover {
    cursor: pointer;
    & .background-image {
      transform: scale(1.1);
      transition: transform 6s cubic-bezier(0.25, 0.45, 0.45, 0.95);
    }

    & .category-body-container {
      opacity: 0.9;
    }
  }

  &.large {
    height: 380px;
  }

  &:first-child {
    margin-right: 7.5px;
  }

  &:last-child {
    margin-left: 7.5px;
  }

  .background-image {
    width: 100%;
    height: 100%;
    background-size: cover;
    background-position: center;
  }

  .category-body-container {
    height: 90px;
    padding: 0 25px;
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: unset;
    border: 1px solid black;
    background-color: white;
    opacity: 0.7;
    position: absolute;

    h2 {
      font-weight: bold;
      font-size: 22px;
      color: #4a4a4a;
    }

    p {
      margin: -20px;
      font-weight: bolder;
      font-size: 16px;
      color: #4a4a4a;
    }
  }
}

// Routing in React:

// Routing allows you to navigate between different views in a single-page application.
// Install React Router: npm add react-router-dom

// index.js for Routing:

import { BrowserRouter } from 'react-router-dom';
import App from './App';

<BrowserRouter>
  <App/>
</BrowserRouter>

// App.js for Routing:

import { Routes, Route } from 'react-router-dom';
import Home from './Home';

<Routes>
  <Route path="/" element={<Home/>}/>
</Routes>

// Nesting Routes Example:

import { Outlet } from 'react-router-dom';

// Navbar and Homepage components are displayed with navigation between them.

<div>
  <h1>This is a Navbar</h1>
  <Outlet/>
</div>

<div>
  <h1>Homepage Content</h1>
</div>

<Routes>
  <Route path="/" element={<Navbar />}>
    <Route index element={<Homepage />}/>
  </Route>
</Routes>

// Firebase Setup:

// Firebase provides various backend services for your application, including authentication, database, and storage.
// Add Firebase to React: npm add firebase

// Firebase Configuration:

import { initializeApp } from "firebase/app";

const firebaseConfig = {
  apiKey: "AIzaSyDV-4MVx1XvicF3OT5GF9kVs8AR2_4YQ-w",
  authDomain: "capstone-db-7244a.firebaseapp.com",
  projectId: "capstone-db-7244a",
  storageBucket: "capstone-db-7244a.appspot.com",
  messagingSenderId: "660774090004",
  appId: "1:660774090004:web:224cf7f8a65f9e8abbbe01"
};

const app = initializeApp(firebaseConfig);

// Google Sign-In Setup:

import { getAuth, GoogleAuthProvider, signInWithPopup } from 'firebase/auth';

const provider = new GoogleAuthProvider();
provider.setCustomParameters({
  prompt: 'select_account'
});

export const auth = getAuth();
export const signInWithGoogle = () => signInWithPopup(auth, provider);

// Firestore Database Setup:

// Firestore is a NoSQL database for storing and syncing data in real-time.

// Add Rules to Firestore Database for Security:

service cloud.firestore {
  match /databases/{database}/documents {
    match /{document=**} {
      allow read, write: if true;
    }
  }
}

// JavaScript Functions for Firestore Operations:

import { getFirestore, doc, getDoc, setDoc } from 'firebase/firestore';
import { getAuth, signInWithPopup, createUserWithEmailAndPassword } from 'firebase/auth';

export const firebaseDB = getFirestore();

// Create user data in Firestore:

export const createUserData = async (userAuth, { extraInfo }) => {
  if (!userAuth) return;
  if (!extraInfo) return;

  const UserDocRef = doc(firebaseDB, 'users', userAuth.uid);

  const userSnapshot = await getDoc(UserDocRef);

  if (!userSnapshot.exists()) {
    const { displayName, email } = userAuth;
    const createdAt = new Date();
    try {
      await setDoc(UserDocRef, {
        displayName,
        email,
        createdAt,
        ...extraInfo
      });
      console.log('User Created');
    } catch (error) {
      console.log(error);
    }
  }
};


// React Context Hook (useContext()):
// The Context API is used to manage state and pass it down the component tree without prop drilling.
// It is useful for managing global state like user authentication and theme settings.

import React, { createContext, useContext, useState } from 'react';

export const UserContext = createContext();

export const UserProvider = ({ children }) => {
  const [user, setUser] = useState(null);

  // Add additional state and functions as needed
  // e.g., login, logout functions

  return (
    <UserContext.Provider value={{ user, setUser }}>
      {children}
    </UserContext.Provider>
  );
};

// In index.js, wrap your main App component with UserProvider:

import React from 'react';
import ReactDOM from 'react-dom/client';
import { BrowserRouter } from 'react-router-dom';
import { UserProvider } from './UserContext';
import App from './App';

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(
  <React.StrictMode>
    <BrowserRouter>
      <UserProvider>
        <App />
      </UserProvider>
    </BrowserRouter>
  </React.StrictMode>
);

// Observer Pattern in Firebase Authentication:
// The observer pattern is useful for handling real-time updates, like monitoring authentication state changes.

import { onAuthStateChanged } from 'firebase/auth';
import { auth } from './firebase'; // Import the Firebase auth instance

onAuthStateChanged(auth, (user) => {
  if (user) {
    console.log('User is signed in:', user);
  } else {
    console.log('No user is signed in.');
  }
});

// Firestore Database Operations:
// Firestore is a NoSQL database that allows for flexible, scalable data storage.

import { getFirestore, collection, addDoc, query, getDocs, writeBatch } from 'firebase/firestore';

// Function to add a collection and its documents:

export const addCollectionAndDocuments = async (collectionKey, objectsToAdd) => {
  const collectionRef = collection(firebaseDB, collectionKey);
  const batch = writeBatch(firebaseDB);

  objectsToAdd.forEach((object) => {
    const docRef = doc(collectionRef, object.title.toLowerCase());
    batch.set(docRef, object);
  });

  await batch.commit();
  console.log('Database created...');
};

// Usage Example:

import SHOP_DATA from '../Shop-data';
import { useEffect } from 'react';
import { addCollectionAndDocuments } from '../Utils/Firebase/Firebase.utils';

useEffect(() => {
  addCollectionAndDocuments('categories', SHOP_DATA);
}, []);

// Function to fetch a collection and its documents:

import { getFirestore, collection, getDocs } from 'firebase/firestore';

export const fetchCollectionData = async (collectionKey) => {
  const collectionRef = collection(firebaseDB, collectionKey);
  const querySnapshot = await getDocs(collectionRef);
  const data = querySnapshot.docs.map((doc) => doc.data());
  console.log('Fetched Data:', data);
  return data;
};

// CSS-in-JS with styled-components:
// Styled-components allow you to write CSS directly in your JavaScript files, providing a scoped and modular way to style your components.

import styled from 'styled-components';
import { Link } from 'react-router-dom';

// Styled navigation container:

export const NavigationContainer = styled.div`
  height: 70px;
  width: 100%;
  display: flex;
  justify-content: space-between;
  align-items: center;
  background: radial-gradient(circle at top left, #333, #666, #000); /* Radial gradient effect */
  padding: 0 10px; /* Padding for spacing */
  box-shadow: 0 2px 5px rgba(0, 0, 0, 0.2); /* Optional shadow for the navbar */
  margin-bottom: 10px;
`;

// Styled link within navigation:

export const NavLinks = styled(Link)`
  color: #ffffff; /* White color for the links */
  text-decoration: none;
  padding: 10px 15px;
  cursor: pointer;
  border-radius: 5px;
  &:hover {
    background-color: rgba(247, 197, 169, 0.2); /* Hover effect */
  }
`;

// Styled components using css helper:

import { css } from 'styled-components';

const subColor = 'grey';
const mainColor = 'black';

const shrinkLabel = css`
  top: -20px;
  font-size: 15px;
  color: ${mainColor};
`;

// React Redux:
// Redux is a state management library that helps manage the application state in a predictable way.
// Reducers are functions that specify how the application's state changes in response to actions.

import { createStore } from 'redux';

// Example of a simple reducer:

const initialState = {
  count: 0
};

const reducer = (state = initialState, action) => {
  switch (action.type) {
    case 'INCREMENT':
      return { ...state, count: state.count + 1 };
    case 'DECREMENT':
      return { ...state, count: state.count - 1 };
    default:
      return state;
  }
};

// Create Redux store:

const store = createStore(reducer);

// Example usage of dispatching actions:

store.dispatch({ type: 'INCREMENT' });
store.dispatch({ type: 'DECREMENT' });
