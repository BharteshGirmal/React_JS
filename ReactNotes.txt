React Course 22/07/2024

React is a javaScript library which returns the html Component.

class component:

import React, { Component } from 'react'

export default class App extends Component {
  render() {
    return (
      <div>
        
      </div>
    )
  }
}


Function Compoenent:
import React from 'react'

export default function App() {
  return (
    <div>App</div>
  )
}


State:
	export default class App extends Component {

		// Constructor is used in class based components and super() is by default gets called
		// it calls the constructor of parent class which is inherited.
		
		constructor(){
			super();
			this.state={
				Name:"Bhartesh",
			}
		}
		
	  render() {

		return (
		  <div>
			<span>{this.state.Name}</span>
			<Button onClick={()=>{
				this.setState({
					Name:"Girmal"
				});
				
			}}>Click here</button>
		  </div>
		)
	  }
	}
	
Shallow Merge:

this.setState((state, props)=>{
	return {	
		Name :{firstName:"Bhartesh", lastName:"Girmal"};
	}
}, ()=>{
	console.log(this.state);
})

Mapping Arrays to Elements
this.state={
	
	monsters:[
	{Name:"Monster1"},{Name:"Monster2"},{Name:"Monster3"},{Name:"Monster4"},{Name:"Monster5"},]
}

{this.state.monsters.map((monster)=>
	{
		// while using map key attribute value is complsory
		return <h1 key={monster.name}>monster.name</h1>
	})
}
  
// The keys are used for rendering the purpose, only required HTML only

Single Page Applications :

Component Lify cycle Methods
1.componentDidMount()
2.componentDidUpdate()
3.componentWillUnMount()

componentDidMount(){

	fetch('https://jsonplaceholder.typicode.com/users').then((response)=>
	{
		return response.json()
	
	}).then((data)=>{
		console.log(data);
	}).catch((err)=>{
		console.log(err.message);
	})
	 
	// using async await
	
	const fetchData = async () => {
    try {
        const response = await fetch('https://jsonplaceholder.typicode.com/users');
        const data = await response.json();
        console.log(data);
    } catch (err) {
			console.log(err.message);
		}
	};
	
	// Using Axios
	const fetchDataWithAxios = async () => {
    try {
        const response = await axios.get('https://jsonplaceholder.typicode.com/users');
        const data = response.data;
        console.log(data);
    } catch (err) {
			console.log(err.message);
		}
	};
}

Props:
App component :
 <SearchBox className='search-box' placeholder='search monsters' handleSearchChange={this.handleOnChange}/>
        <CardList monsterarray={filteredMonsters} />
Search Component :
<div className='container'>
        <input
          className={this.props.className}
          type='search'
          placeholder={this.props.placeholder}
          onChange={this.props.handleSearchChange}
        />
      </div>
	  
	
CSS in React 


Images for Monsters

URL : https://robohash.org/

https://robohash.org/{index}/set=set{index}

Functional Components and Class Components

Pure Function and Impure Function

const pureFunc = (a, b)=>{
	return a + b;
}
// it always returns the same output

let c= 100;
const ImpureFunc = (a, b)=>{
	return a + b + c;
}
// it will change the output

useEffect Hook
    const fetchData = async () => {
      try {
        const response = await fetch('https://jsonplaceholder.typicode.com/users');
        const data = await response.json();
        setMonsters(data);
      } catch (error) {
        console.error('Error fetching data:', error);
      }
    };

    useEffect(()=>{
      fetchData();
    },[]);
	
// it gets called when the component gets rendered 
    useEffect(()=>{
      // To avoid the re rendering of Monsters array 
      const newFilteredMonsters = monsters.filter(monster =>
          monster.name.toLowerCase().includes(searchfield)
      );

      setFilteredMonsters(newFilteredMonsters);
    
    },[monsters, searchfield]);
	
// Whenever monsters value or searchfiled value changes call this hook 

React v17 migrating to React-DOM V18 Changes 
	- npm upgrade react react-dom --latest
	
	import React from 'react';
	import ReactDOM from 'react-dom/client';
	import './index.css';
	import App from './App';
	import reportWebVitals from './reportWebVitals';

	const root = ReactDOM.createRoot(document.getElementById('root'));
	root.render(
	  <React.StrictMode>
		<App />
	  </React.StrictMode>
	);
	
DOM and Virtual DOM :

DOM = Document Object Model its a visual representation of HTML tree structure
Virtual DOM = is a Virtual representation of actal DOM 


SASS:
cmd : npm add sass
Ex.

    .category-container {
      min-width: 30%;
      height: 240px;
      flex: 1 1 auto;
      display: flex;
      align-items: center;
      justify-content: center;
      border: 1px solid black;
      margin: 0 7.5px 15px;
      overflow: hidden;
    
      &:hover {
        cursor: pointer;
        & .background-image {
          transform: scale(1.1);
          transition: transform 6s cubic-bezier(0.25, 0.45, 0.45, 0.95);
        }
    
        & .category-body-container {
          opacity: 0.9;
        }
      }
    
      &.large {
        height: 380px;
      }
    
      &:first-child {
        margin-right: 7.5px;
      }
    
      &:last-child {
        margin-left: 7.5px;
      }
    
      .background-image {
        width: 100%;
        height: 100%;
        background-size: cover;
        background-position: center;
      }
    
      .category-body-container {
        height: 90px;
        padding: 0 25px;
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: unset;
        border: 1px solid black;
        background-color: white;
        opacity: 0.7;
        position: absolute;
    
        h2 {
          font-weight: bold;
          font-size: 22px;
          color: #4a4a4a;
        }
    
        p {
          margin: -20px;
          font-weight: bolder;
          font-size: 16px;
          color: #4a4a4a;
        }
      }
    }
    

Routing:
index.js:
	<Browserouter>
		<App/>
	</Browserouter>

App.js
	<Routes>
		<Route path="/" element={<Home/>}/>
	</Routes>
	
Nesting of Routes using {Outlet} from 'react-router-dom'