React Course 22/07/2024

React is a javaScript library which returns the html Component.

class component:

import React, { Component } from 'react'

export default class App extends Component {
  render() {
    return (
      <div>
        
      </div>
    )
  }
}


Function Compoenent:
import React from 'react'

export default function App() {
  return (
    <div>App</div>
  )
}


State:
	export default class App extends Component {

		// Constructor is used in class based components and super() is by default gets called
		// it calls the constructor of parent class which is inherited.
		
		constructor(){
			super();
			this.state={
				Name:"Bhartesh",
			}
		}
		
	  render() {

		return (
		  <div>
			<span>{this.state.Name}</span>
			<Button onClick={()=>{
				this.setState({
					Name:"Girmal"
				});
				
			}}>Click here</button>
		  </div>
		)
	  }
	}
	
Shallow Merge:

this.setState((state, props)=>{
	return {	
		Name :{firstName:"Bhartesh", lastName:"Girmal"};
	}
}, ()=>{
	console.log(this.state);
})

Mapping Arrays to Elements
this.state={
	
	monsters:[
	{Name:"Monster1"},{Name:"Monster2"},{Name:"Monster3"},{Name:"Monster4"},{Name:"Monster5"},]
}

{this.state.monsters.map((monster)=>
	{
		// while using map key attribute value is complsory
		return <h1 key={monster.name}>monster.name</h1>
	})
}
  
// The keys are used for rendering the purpose, only required HTML only

Single Page Applications :

Component Lify cycle Methods
1.componentDidMount()
2.componentDidUpdate()
3.componentWillUnMount()

componentDidMount(){

	fetch('https://jsonplaceholder.typicode.com/users').then((response)=>
	{
		return response.json()
	
	}).then((data)=>{
		console.log(data);
	}).catch((err)=>{
		console.log(err.message);
	})
	 
	// using async await
	
	const fetchData = async () => {
    try {
        const response = await fetch('https://jsonplaceholder.typicode.com/users');
        const data = await response.json();
        console.log(data);
    } catch (err) {
			console.log(err.message);
		}
	};
	
	// Using Axios
	const fetchDataWithAxios = async () => {
    try {
        const response = await axios.get('https://jsonplaceholder.typicode.com/users');
        const data = response.data;
        console.log(data);
    } catch (err) {
			console.log(err.message);
		}
	};
}

Props:
App component :
 <SearchBox className='search-box' placeholder='search monsters' handleSearchChange={this.handleOnChange}/>
        <CardList monsterarray={filteredMonsters} />
Search Component :
<div className='container'>
        <input
          className={this.props.className}
          type='search'
          placeholder={this.props.placeholder}
          onChange={this.props.handleSearchChange}
        />
      </div>
	  
	
CSS in React 


Images for Monsters

URL : https://robohash.org/

https://robohash.org/{index}/set=set{index}

Functional Components and Class Components

Pure Function and Impure Function

const pureFunc = (a, b)=>{
	return a + b;
}
// it always returns the same output

let c= 100;
const ImpureFunc = (a, b)=>{
	return a + b + c;
}
// it will change the output

useEffect Hook
    const fetchData = async () => {
      try {
        const response = await fetch('https://jsonplaceholder.typicode.com/users');
        const data = await response.json();
        setMonsters(data);
      } catch (error) {
        console.error('Error fetching data:', error);
      }
    };

    useEffect(()=>{
      fetchData();
    },[]);
	
// it gets called when the component gets rendered 
    useEffect(()=>{
      // To avoid the re rendering of Monsters array 
      const newFilteredMonsters = monsters.filter(monster =>
          monster.name.toLowerCase().includes(searchfield)
      );

      setFilteredMonsters(newFilteredMonsters);
    
    },[monsters, searchfield]);
	
// Whenever monsters value or searchfiled value changes call this hook 

React v17 migrating to React-DOM V18 Changes 
	- npm upgrade react react-dom --latest
	
	import React from 'react';
	import ReactDOM from 'react-dom/client';
	import './index.css';
	import App from './App';
	import reportWebVitals from './reportWebVitals';

	const root = ReactDOM.createRoot(document.getElementById('root'));
	root.render(
	  <React.StrictMode>
		<App />
	  </React.StrictMode>
	);
	
DOM and Virtual DOM :

DOM = Document Object Model its a visual representation of HTML tree structure
Virtual DOM = is a Virtual representation of actal DOM 


SASS:
cmd : npm add sass
Ex.

    .category-container {
      min-width: 30%;
      height: 240px;
      flex: 1 1 auto;
      display: flex;
      align-items: center;
      justify-content: center;
      border: 1px solid black;
      margin: 0 7.5px 15px;
      overflow: hidden;
    
      &:hover {
        cursor: pointer;
        & .background-image {
          transform: scale(1.1);
          transition: transform 6s cubic-bezier(0.25, 0.45, 0.45, 0.95);
        }
    
        & .category-body-container {
          opacity: 0.9;
        }
      }
    
      &.large {
        height: 380px;
      }
    
      &:first-child {
        margin-right: 7.5px;
      }
    
      &:last-child {
        margin-left: 7.5px;
      }
    
      .background-image {
        width: 100%;
        height: 100%;
        background-size: cover;
        background-position: center;
      }
    
      .category-body-container {
        height: 90px;
        padding: 0 25px;
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: unset;
        border: 1px solid black;
        background-color: white;
        opacity: 0.7;
        position: absolute;
    
        h2 {
          font-weight: bold;
          font-size: 22px;
          color: #4a4a4a;
        }
    
        p {
          margin: -20px;
          font-weight: bolder;
          font-size: 16px;
          color: #4a4a4a;
        }
      }
    }
    

Routing:
index.js:
	<Browserouter>
		<App/>
	</Browserouter>

App.js
	<Routes>
		<Route path="/" element={<Home/>}/>
	</Routes>
	
Nesting of Routes using {Outlet} from 'react-router-dom'

Navbar:
	<div>
	<h1>This is a Navbar</h1>
	<Outlet/>
	</div>
	
Homepage:
	<div>
	<h1>Homepage Context</h1>
	</div>
	
App.js
<Routes>
<Route path="/" element={<Navbar/>}>
<Route index element={<Homepage />}/>
</Route>
</Routes>

This will load the navigation bar as constant with homepage

Firebase And Authentication

	Database Name : Capstone-db

	add package in react : npm add firebase 

	CRUD (Create Read Update Delete)
	
							Fetch Data (Using Auth Token)
				-------------------------------->
	App													Firebase
				<--------------------------------
	|  |				Return Data (If Auth Success) Else Return Error
	|  |
	|  |
	|  |Sign In
	|  |
	|  |
	|  |______________>    Google
	|__________________
	Sends the Auth Token
	
Firebase Code :
	-Open the firebase open console page
	-create a project
	-click on web button and Name the project
	- Firebase will give the readymade JS Code for the project 
	
	import { initializeApp } from "firebase/app";
	
	const firebaseConfig = {
	  apiKey: "AIzaSyDV-4MVx1XvicF3OT5GF9kVs8AR2_4YQ-w",
	  authDomain: "capstone-db-7244a.firebaseapp.com",
	  projectId: "capstone-db-7244a",
	  storageBucket: "capstone-db-7244a.appspot.com",
	  messagingSenderId: "660774090004",
	  appId: "1:660774090004:web:224cf7f8a65f9e8abbbe01"
	};

	const app = initializeApp(firebaseConfig);
	
	- use Google sign in methods from firebase
	
		import {initializeApp} from 'firebase/app'
		import {
			  getAuth, 
			  signInWithRedirect, 
			  signInWithPopup, 
			  GoogleAuthProvider} from 'firebase/auth'

		const firebaseConfig = {
			  apiKey: "AIzaSyDV-4MVx1XvicF3OT5GF9kVs8AR2_4YQ-w",
			  authDomain: "capstone-db-7244a.firebaseapp.com",
			  projectId: "capstone-db-7244a",
			  storageBucket: "capstone-db-7244a.appspot.com",
			  messagingSenderId: "660774090004",
			  appId: "1:660774090004:web:224cf7f8a65f9e8abbbe01"
			  };

		const FireBaseApp = initializeApp(firebaseConfig);

		const provider = new GoogleAuthProvider();
		propvider.setCustomParameters({
			  prompt:'select_account'
		})

		export const auth = getAuth();
		export const signInRedirect = ()=> signInWithPopup(auth, provider);
		
Firestore Database :
Add Rules to true
service cloud.firestore {
  match /databases/{database}/documents {
    match /{document=**} {
      allow read, write: if true;
    }
  }
}

JS:
import {getFirestore, doc, getDoc, setDoc} from 'firebase/firestore'
import {
      getAuth, 
      signInWithRedirect, 
      signInWithPopup, 
      signInWithEmailAndPassword,
      createUserWithEmailAndPassword,
      GoogleAuthProvider} from 'firebase/auth'
	 
// Creating auth and provider to firestore database

export const firebaseDB = getFirestore();


export const createUserData = async (userAuth, {extraInfo})=>{
      if(!userAuth) return;
      if(!extraInfo) return;
      // userAuth.uid = is a unique id to search in the firestore database
      const UserDocRef = doc(firebaseDB, 'users', userAuth.uid);
      console.log('====================================');
      console.log(UserDocRef);
      console.log('====================================');

      const userSnapshot = await getDoc(UserDocRef);

      // if userSnapshot does not exists
      if(!userSnapshot.exists()){
        const {displayName, email} = userAuth;
        const createdAt = new Date();
        try {
            await setDoc(UserDocRef, {
                  displayName,
                  email,
                  createdAt,
                  ...extraInfo
            });

            console.log('User Created');
            
        } catch (error) {
            console.log('====================================');
            console.log(error);
            console.log('====================================');
        }
      }
      // if userSnapshot.exists
      return UserDocRef;
}

React Context Hook (useContext()):
Usercontext.jsx:
	import React, { createContext } from 'react'

	export const userContext = createContext();

	export const UserProvider= ({children})=> {
	  return (
		<userContext.Provider>{children}</userContext.Provider>
	  )
	} 
	
Index.js Changes :

root.render(
  <React.StrictMode>
    <BrowserRouter>
		<UserProvider>
			App/>
		</UserProvider>
    </BrowserRouter>
  </React.StrictMode>
);


Observer Pattern :

using firbase/auth - onAuthStateChange

Firestore database 

-Its a NoSQL database

1) Inserting collection and documents to firestore 

Collection, writeBatch from firebase/firestore

Utils:

export const firebaseDB = getFirestore();

export const AddCollectionAndDocuments = async (collectionKey, objectToAdd)=>{
      const CollectionRef = collection(firebaseDB,collectionKey );
      // for secure successfull transaction use batch method
      const batch =  writeBatch(firebaseDB);

      objectToAdd.forEach((object)=>{
            const docRef = doc(CollectionRef, object.title.toLowerCase());
            batch.set(docRef, object);
      });

      await batch.commit();
      console.log('Database created...');
      

}

Usage:
	import SHOP_DATA from '../Shop-data';
	import React, { useEffect } from 'react'

	import { AddCollectionAndDocuments } from '../Utils/Firebase/Firebase.utils';

	
	useEffect(() => {
	  AddCollectionAndDocuments('categories', SHOP_DATA);
	}, []);


2)  Fetching the collection and document 

import query, getdocs from './firebase/firestore';



CSS in JS :

npm add styled-components:






